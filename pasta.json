{
    "interject": {
        "embed": {
            "author": {
                "name": "Richard Stallman",
                "icon_url": "https://pbs.twimg.com/profile_images/406721195/richard_stallman_portrait_280o_normal.jpg"
            },
            "description": "I'd just like to interject for a moment. What you’re referring to as Linux, is in fact, GNU/Linux, or as I’ve recently taken to calling it, GNU plus Linux. Linux is not an operating system unto itself, but rather another free component of a fully functioning GNU system made useful by the GNU corelibs, shell utilities and vital system components comprising a full OS as defined by POSIX. Many computer users run a modified version of the GNU system every day, without realizing it. Through a peculiar turn of events, the version of GNU which is widely used today is often called “Linux”, and many of its users are not aware that it is basically the GNU system, developed by the GNU Project. There really is a Linux, and these people are using it, but it is just a part of the system they use. Linux is the kernel: the program in the system that allocates the machine’s resources to the other programs that you run. The kernel is an essential part of an operating system, but useless by itself; it can only function in the context of a complete operating system. Linux is normally used in combination with the GNU operating system: the whole system is basically GNU with Linux added, or GNU/Linux. All the so-called “Linux” distributions are really distributions of GNU/Linux."
        }
    },
    "norichard": [{
        "embed": {
            "description": "No, Richard, it's 'Linux', not 'GNU/Linux'. The most important contributions that the FSF made to Linux were the creation of the GPL and the GCC compiler. Those are fine and inspired products. GCC is a monumental achievement and has earned you, RMS, and the Free Software Foundation countless kudos and much appreciation."
        }
    }, {
        "embed": {
            "description": "One guy, Linus Torvalds, used GCC to make his operating system (yes, Linux is an OS -- more on this later). He named it 'Linux' with a little help from his friends. Why doesn't he call it GNU/Linux? Because he wrote it, with more help from his friends, not you. You named your stuff, I named my stuff -- including the software I wrote using GCC -- and Linus named his stuff. The proper name is Linux because Linus Torvalds says so. Linus has spoken. Accept his authority. To do otherwise is to become a nag. You don't want to be known as a nag, do you?\n(An operating system) != (a distribution). Linux is an operating system. By my definition, an operating system is that software which provides and limits access to hardware resources on a computer. That definition applies whereever you see Linux in use. However, Linux is usually distributed with a collection of utilities and applications to make it easily configurable as a desktop system, a server, a development box, or a graphics workstation, or whatever the user needs. In such a configuration, we have a Linux (based) distribution. Therein lies your strongest argument for the unwieldy title 'GNU/Linux' (when said bundled software is largely from the FSF). Go bug the distribution makers on that one. Take your beef to Red Hat, Mandrake, and Slackware. At least there you have an argument. Linux alone is an operating system that can be used in various applications without any GNU software whatsoever. Embedded applications come to mind as an obvious example."
        }
    }, {
        "embed": {
            "description": "Next, even if we limit the GNU/Linux title to the GNU-based Linux distributions, we run into another obvious problem. XFree86 may well be more important to a particular Linux installation than the sum of all the GNU contributions. More properly, shouldn't the distribution be called XFree86/Linux? Or, at a minimum, XFree86/GNU/Linux? Of course, it would be rather arbitrary to draw the line there when many other fine contributions go unlisted. Yes, I know you've heard this one before. Get used to it. You'll keep hearing it until you can cleanly counter it.\nYou seem to like the lines-of-code metric. There are many lines of GNU code in a typical Linux distribution. You seem to suggest that (more LOC) == (more important). However, I submit to you that raw LOC numbers do not directly correlate with importance. I would suggest that clock cycles spent on code is a better metric. For example, if my system spends 90% of its time executing XFree86 code, XFree86 is probably the single most important collection of code on my system. Even if I loaded ten times as many lines of useless bloatware on my system and I never excuted that bloatware, it certainly isn't more important code than XFree86. Obviously, this metric isn't perfect either, but LOC really, really sucks. Please refrain from using it ever again in supporting any argument.\nLast, I'd like to point out that we Linux and GNU users shouldn't be fighting among ourselves over naming other people's software. But what the heck, I'm in a bad mood now. I think I'm feeling sufficiently obnoxious to make the point that GCC is so very famous and, yes, so very useful only because Linux was developed. In a show of proper respect and gratitude, shouldn't you and everyone refer to GCC as 'the Linux compiler'? Or at least, 'Linux GCC'? Seriously, where would your masterpiece be without Linux? Languishing with the HURD?"
        }
    }, {
        "embed": {
            "description": "If there is a moral buried in this rant, maybe it is this:\nBe grateful for your abilities and your incredible success and your considerable fame. Continue to use that success and fame for good, not evil. Also, be especially grateful for Linux' huge contribution to that success. You, RMS, the Free Software Foundation, and GNU software have reached their current high profiles largely on the back of Linux. You have changed the world. Now, go forth and don't be a nag.\nThanks for listening."
        }
    }],
    "stfu": {
        "embed": {
            "author": {
                "name": "Linus Torvalds",
                "icon_url": "https://avatars1.githubusercontent.com/u/1024025?v=3&s=460"
            },
            "description": "Mauro, SHUT THE FUCK UP!\n\nIt's a bug alright - in the kernel. How long have you been a\nmaintainer? And you *still* haven't learnt the first rule of kernel\nmaintenance?\n\nIf a change results in user programs breaking, it's a bug in the\nkernel. We never EVER blame the user programs. How hard can this be to\nunderstand?\n\nTo make matters worse, commit f0ed2ce840b3 is clearly total and utter\nCRAP even if it didn't break applications. ENOENT is not a valid error\nreturn from an ioctl. Never has been, never will be. ENOENT means \"No\nsuch file and directory\", and is for path operations. ioctl's are done\non files that have already been opened, there's no way in hell that\nENOENT would ever be valid.\n\n> So, on a first glance, this doesn't sound like a regression,\n> but, instead, it looks tha pulseaudio/tumbleweed has some serious\n> bugs and/or regressions.\n\nShut up, Mauro. And I don't _ever_ want to hear that kind of obvious\ngarbage and idiocy from a kernel maintainer again. Seriously.\n\nI'd wait for Rafael's patch to go through you, but I have another\nerror report in my mailbox of all KDE media applications being broken\nby v3.8-rc1, and I bet it's the same kernel bug. And you've shown\nyourself to not be competent in this issue, so I'll apply it directly\nand immediately myself.\n\nWE DO NOT BREAK USERSPACE!\n\nSeriously. How hard is this rule to understand? We particularly don't\nbreak user space with TOTAL CRAP. I'm angry, because your whole email\nwas so _horribly_ wrong, and the patch that broke things was so\nobviously crap. The whole patch is incredibly broken shit. It adds an\ninsane error code (ENOENT), and then because it's so insane, it adds a\nfew places to fix it up (\"ret == -ENOENT ? -EINVAL : ret\").\n\nThe fact that you then try to make *excuses* for breaking user space,\nand blaming some external program that *used* to work, is just\nshameful. It's not how we work.\n\nFix your f*cking \"compliance tool\", because it is obviously broken.\nAnd fix your approach to kernel programming.\n"
        }
    },
    "gentoo": {
        "embed": {
            "image": {
                "url": "http://i.imgur.com/RLF8XyU.gif"
            }
        }
    },
    "paste": {
        "embed": {
            "author": {
                "name": "Pastebin",
                "icon_url": "http://i.imgur.com/HEBKNNi.png"
            },
            "description": "Please paste your log/message here: https://paste.fedoraproject.org/"
        }
    },
    "systemd": { 
      "embed": {
        "description": "First off, systemd is not an init system, it has an init system as part of the systemd suite. systemd is a project to build a standardised lowlevel userland for Linux. The project is pretty comprehensive and it delivers a lot of functionality under one umbrella. It does away with a lot of older, often undermaintained software packages, which were traditionally used to assemble a low level userland.\n\nWhich is where the contention comes from, as a system suite systemd is restrictive for Unix virtuosi who are used to tailor a system with wit, ingenuity, a lick and a prayer and a couple dozen of unrelated packages. systemd makes such knowledge useless.\n\nThe faction that thinks that systemd is Linux's Hiroshima, finds all the added functionality bloat, unnecessary and dangerous, as it is all under development in one project.\n\nAll the systemd jokes stem from the comprehensiveness as a low level system suite. People against it love to joke that one day systemd will write its own kernel.\n\nThere is a lot of FUD and hate going around. Some arguments do have merit, a lot of eggs in one basket is certainly true, but as with all things in life, it depends which tradeoff you prefer. Do you want a suite of well designed software, working closely together, so that system management is streamlined or do you want the complete freedom to tailor your own low level system with a lot of time tested, interchangeable components.\n\nI have no desire to be a low level system designer, so I prefer systemd. I don't hate traditional init systems though. If a Linux system has one and I need to work with it, I'm still happy it boots and starts the necessary services."
      }
    }
}
